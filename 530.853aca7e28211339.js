"use strict";(self.webpackChunktv_manager=self.webpackChunktv_manager||[]).push([[530],{4730:(P,T,s)=>{s.d(T,{M:()=>o});var p=s(4572),f=s(6354),R=s(5558),_=s(7705),E=s(8515),O=s(3787);let o=(()=>{class i{constructor(n,d){this.firestore=n,this.televisorService=d,this.collection="clientes"}getClientes(){return this.firestore.collection(this.collection).snapshotChanges().pipe((0,f.T)(n=>n.map(d=>({...d.payload.doc.data(),id:d.payload.doc.id}))),(0,R.n)(n=>{if(0===n.length)return[[]];const d=n.map(M=>this.televisorService.contarTelevisoresPorCliente(M.id).pipe((0,f.T)(t=>({...M,televisores:new Array(t).fill(null)}))));return(0,p.z)(d)}))}getClienteById(n){return this.firestore.doc(`${this.collection}/${n}`).valueChanges({idField:"id"})}createCliente(n){const d={...n,activo:n.activo??!0,fechaCreacion:new Date,configuracion:{rotacionAutomatica:!0,tiempoRotacion:5e3,horarioOperacion:{inicio:"08:00",fin:"18:00"},...n.configuracion}};return this.firestore.collection(this.collection).add(d)}updateCliente(n,d){return this.firestore.doc(`${this.collection}/${n}`).update(d)}deleteCliente(n){return this.firestore.doc(`${this.collection}/${n}`).delete()}getClientesActivos(){return this.firestore.collection(this.collection,n=>n.where("activo","==",!0)).snapshotChanges().pipe((0,f.T)(n=>n.map(d=>({...d.payload.doc.data(),id:d.payload.doc.id}))))}static{this.\u0275fac=function(d){return new(d||i)(_.KVO(E.Qe),_.KVO(O.N))}}static{this.\u0275prov=_.jDH({token:i,factory:i.\u0275fac,providedIn:"root"})}}return i})()},4965:(P,T,s)=>{s.d(T,{D:()=>n});var p=s(8455),f=s(6354),R=s(980),_=s(5964),E=s(6697),O=s(5558),o=s(7705),i=s(8515),m=s(3383);let n=(()=>{class d{constructor(t,e){this.firestore=t,this.storage=e,this.collection="imagenes",this.storagePath="imagenes"}getAllImagenes(){return this.firestore.collection(this.collection).snapshotChanges().pipe((0,f.T)(t=>t.map(e=>({...e.payload.doc.data(),id:e.payload.doc.id})).sort((e,a)=>new Date(a.fechaCreacion).getTime()-new Date(e.fechaCreacion).getTime())))}getImagenesByTelevisor(t){return this.firestore.collection(this.collection,e=>e.where("televisorId","==",t)).snapshotChanges().pipe((0,f.T)(e=>e.map(a=>({...a.payload.doc.data(),id:a.payload.doc.id})).sort((a,r)=>new Date(r.fechaCreacion).getTime()-new Date(a.fechaCreacion).getTime())))}uploadImagen(t,e,a,r){const u=`${Date.now()}_${t.name}`,h=`${this.storagePath}/${e}/${u}`,I=this.storage.ref(h),l=this.storage.upload(h,t);return console.log("\u{1f504} Iniciando upload de imagen:",u),console.log("\u{1f4c1} Ruta del archivo:",h),l.snapshotChanges().pipe((0,R.j)(()=>{console.log("\u2705 Upload task finalizado")}),(0,_.p)(c=>null!=c&&"success"===c.state),(0,E.s)(1),(0,O.n)(()=>(console.log("\u{1f517} Upload completado exitosamente, obteniendo URL..."),I.getDownloadURL())),(0,O.n)(c=>{console.log("\u2705 URL de descarga obtenida:",c);const g={nombre:a,url:c,televisorId:e,clienteId:r,fechaCreacion:new Date,horarios:[]};return console.log("\u{1f4be} Guardando datos en Firestore:",g),(0,p.H)(this.firestore.collection(this.collection).add(g)).pipe((0,f.T)(C=>{const v={id:C.id,...g};return console.log("\u2705 Imagen guardada completamente:",v),v}))}))}updateHorarios(t,e){return(0,p.H)(this.firestore.collection(this.collection).doc(t).update({horarios:e}))}deleteImagen(t){const e=this.storage.refFromURL(t.url);return(0,p.H)(e.delete()).pipe((0,O.n)(()=>(0,p.H)(this.firestore.collection(this.collection).doc(t.id).delete())))}agregarHorario(t,e){console.log("\u{1f525} SERVICIO: agregarHorario llamado"),console.log("\u{1f525} SERVICIO: imagenId:",t),console.log("\u{1f525} SERVICIO: horario recibido:",e);const a={id:this.firestore.createId(),...e};return console.log("\u{1f525} SERVICIO: nuevoHorario creado:",a),this.firestore.collection(this.collection).doc(t).get().pipe((0,O.n)(r=>{if(console.log("\u{1f525} SERVICIO: documento existe:",r.exists),r.exists){const u=r.data();console.log("\u{1f525} SERVICIO: datos actuales de la imagen:",u),console.log("\u{1f525} SERVICIO: horarios actuales:",u.horarios);const h=[...u.horarios||[],a];return console.log("\u{1f525} SERVICIO: horarios actualizados:",h),console.log("\u{1f525} SERVICIO: actualizando documento..."),(0,p.H)(r.ref.update({horarios:h})).pipe((0,f.T)(()=>{console.log("\u{1f525} SERVICIO: \u2705 Documento actualizado exitosamente")}))}throw console.log("\u{1f525} SERVICIO: \u274c Imagen no encontrada"),new Error("Imagen no encontrada")}))}eliminarHorario(t,e){return this.firestore.collection(this.collection).doc(t).get().pipe((0,O.n)(a=>{if(a.exists){const u=(a.data().horarios||[]).filter(h=>h.id!==e);return(0,p.H)(a.ref.update({horarios:u}))}throw new Error("Imagen no encontrada")}))}validarConflictosHorarios(t,e,a){return console.log("\u{1f525} SERVICIO: validarConflictosHorarios iniciado"),console.log("\u{1f525} SERVICIO: televisorId:",t),console.log("\u{1f525} SERVICIO: nuevosHorarios:",e),console.log("\u{1f525} SERVICIO: imagenIdExcluir:",a),this.getImagenesByTelevisor(t).pipe((0,f.T)(r=>{console.log("\u{1f525} SERVICIO: im\xe1genes obtenidas:",r);const u=[],h=a?r.filter(l=>l.id!==a):r;console.log("\u{1f525} SERVICIO: im\xe1genes a validar:",h),e.forEach(l=>{console.log("\u{1f525} SERVICIO: validando nuevo horario:",l),h.forEach(c=>{console.log("\u{1f525} SERVICIO: validando contra imagen:",c.nombre,"horarios:",c.horarios),c.horarios.forEach(g=>{console.log("\u{1f525} SERVICIO: comparando con horario existente:",g);const C=l.dias.some(v=>g.dias.some(D=>D.value===v.value));if(console.log("\u{1f525} SERVICIO: d\xedas en com\xfan:",C),C){const v=this.verificarSolapamientoHorarios(l.horaInicio,l.horaFin,g.horaInicio,g.horaFin);console.log("\u{1f525} SERVICIO: conflicto de horario:",v),v&&u.push({imagenConflicto:c.nombre,horarioConflicto:g,diasEnComun:l.dias.filter(D=>g.dias.some(S=>S.value===D.value)),nuevoHorario:l})}})})}),console.log("\u{1f525} SERVICIO: conflictos encontrados:",u);const I={hasConflicts:u.length>0,conflicts:u};return console.log("\u{1f525} SERVICIO: resultado final de validaci\xf3n:",I),I}))}verificarSolapamientoHorarios(t,e,a,r){const u=this.convertirHoraAMinutos(t),h=this.convertirHoraAMinutos(e),I=this.convertirHoraAMinutos(a),l=this.convertirHoraAMinutos(r);return!(h<=I||l<=u)}convertirHoraAMinutos(t){const[e,a]=t.split(":").map(Number);return 60*e+a}getHorariosDisponiblesPorDia(t,e,a){return this.getImagenesByTelevisor(t).pipe((0,f.T)(r=>{const u=a?r.filter(l=>l.id!==a):r,h=[];u.forEach(l=>{l.horarios.forEach(c=>{c.dias.some(C=>C.value===e)&&h.push({inicio:c.horaInicio,fin:c.horaFin})})});const I=[];for(let l=0;l<24;l++)for(let c=0;c<60;c+=15){const g=`${l.toString().padStart(2,"0")}:${c.toString().padStart(2,"0")}`;let C=l,v=c+15;if(v>=60&&(v=0,C++),C>=24)break;const D=`${C.toString().padStart(2,"0")}:${v.toString().padStart(2,"0")}`,S=!this.verificarConflictoConHorarios(g,D,h);I.push({inicio:g,fin:D,disponible:S})}return I}))}verificarConflictoConHorarios(t,e,a){return a.some(r=>this.verificarSolapamientoHorarios(t,e,r.inicio,r.fin))}getImagenesActivasEnHorario(t,e=new Date){const a=e.getDay(),r=e.toTimeString().slice(0,5);return this.getImagenesByTelevisor(t).pipe((0,f.T)(u=>u.filter(h=>!h.horarios||0===h.horarios.length||h.horarios.some(I=>I.dias.some(g=>g.value===a)&&r>=I.horaInicio&&r<=I.horaFin))))}getDiasSemana(){return[{value:1,label:"Lunes"},{value:2,label:"Martes"},{value:3,label:"Mi\xe9rcoles"},{value:4,label:"Jueves"},{value:5,label:"Viernes"},{value:6,label:"S\xe1bado"},{value:0,label:"Domingo"}]}static{this.\u0275fac=function(e){return new(e||d)(o.KVO(i.Qe),o.KVO(m.ap))}}static{this.\u0275prov=o.jDH({token:d,factory:d.\u0275fac,providedIn:"root"})}}return d})()},3787:(P,T,s)=>{s.d(T,{N:()=>_});var p=s(6354),f=s(7705),R=s(8515);let _=(()=>{class E{constructor(o){this.firestore=o,this.collection="televisores"}getTelevisores(){return this.firestore.collection(this.collection).snapshotChanges().pipe((0,p.T)(o=>o.map(i=>({...i.payload.doc.data(),id:i.payload.doc.id}))))}getTelevisoresByCliente(o){return this.firestore.collection(this.collection,i=>i.where("clienteId","==",o)).snapshotChanges().pipe((0,p.T)(i=>i.map(m=>({...m.payload.doc.data(),id:m.payload.doc.id}))))}getTelevisorById(o){return this.firestore.doc(`${this.collection}/${o}`).valueChanges({idField:"id"})}createTelevisor(o){const i={...o,activo:o.activo??!0,estado:o.estado??"Activo",ultimaConexion:new Date,fechaCreacion:new Date,configuracion:{resolucion:"1920x1080",orientacion:"horizontal",tiempoTransicion:5e3,...o.configuracion},imagenes:0};return this.firestore.collection(this.collection).add(i)}updateTelevisor(o,i){return this.firestore.doc(`${this.collection}/${o}`).update(i)}deleteTelevisor(o){return this.firestore.doc(`${this.collection}/${o}`).delete()}asignarTelevisorACliente(o,i,m){return this.firestore.doc(`${this.collection}/${o}`).update({clienteId:i,clienteNombre:m})}desasignarTelevisorDeCliente(o){return this.firestore.doc(`${this.collection}/${o}`).update({clienteId:null,clienteNombre:null})}actualizarEstado(o,i){return this.firestore.doc(`${this.collection}/${o}`).update({estado:i,ultimaConexion:new Date})}getTelevisoresActivos(){return this.firestore.collection(this.collection,o=>o.where("activo","==",!0)).snapshotChanges().pipe((0,p.T)(o=>o.map(i=>({...i.payload.doc.data(),id:i.payload.doc.id}))))}getTelevisoresSinAsignar(){return this.firestore.collection(this.collection,o=>o.where("clienteId","==",null)).snapshotChanges().pipe((0,p.T)(o=>o.map(i=>({...i.payload.doc.data(),id:i.payload.doc.id}))))}contarTelevisoresPorCliente(o){return this.getTelevisoresByCliente(o).pipe((0,p.T)(i=>i.length))}static{this.\u0275fac=function(i){return new(i||E)(f.KVO(R.Qe))}}static{this.\u0275prov=f.jDH({token:E,factory:E.\u0275fac,providedIn:"root"})}}return E})()}}]);